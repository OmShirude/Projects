# -*- coding: utf-8 -*-
"""Predicting_Flight_Prices.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i_-u3D1M66wjyntrm1kFHfUID7km9mA7
"""

from google.colab import drive
drive.mount('/content/drive')

path="https://drive.google.com/file/d/1W_OYYrEWfloVZfZhw1P_z2ds7lXuXii6/view?usp=drive_link"

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

df=pd.read_csv("/content/drive/MyDrive/Datasets/CleanDataset.csv")

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
for col in df.columns:
    if df[col].dtype=='object':
        df[col]=le.fit_transform(df[col])

df.head(15)

df.tail(3)

var = df.drop(['price'],axis=1)
target = df['price']

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

le=LabelEncoder()
for col in df.columns:
    if df[col].dtype=='object':
        df[col]=le.fit_transform(df[col])

df.head(3)
df.tail(3)

x=df.drop(['price'],axis=1)
y=df['price']

xtrain, xtest, ytrain, ytest = train_test_split(var, target, train_size = 0.8, random_state = 42)

a={'Model Name':[], 'Mean_Absolute_Error_MAE':[] ,'Adj_R_Square':[] ,'Root_Mean_Squared_Error_RMSE':[] ,'Mean_Absolute_Percentage_Error_MAPE':[] ,'Mean_Squared_Error_MSE':[] ,'Root_Mean_Squared_Log_Error_RMSLE':[] ,'R2_score':[]}
Results=pd.DataFrame(a)
Results.head()

from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor

from sklearn.ensemble import ExtraTreesRegressor

modelLR = LinearRegression()
modelLR.fit(xtrain, ytrain)
modelDTR = DecisionTreeRegressor()
modelDTR.fit(xtrain, ytrain)
modelETR = ExtraTreesRegressor()
modelETR.fit(xtrain, ytrain)

models = [modelLR, modelDTR, modelETR]

from sklearn import metrics

for model in models:

  y_predicted = model.predict(xtest)
  print('Root Mean Squared Error (RMSE):', round(np.sqrt(metrics.mean_squared_error(ytest, y_predicted)), 2))
  print('Mean Squared Error (MSE):', round(metrics.mean_squared_error(ytest, y_predicted), 2))
  print('Mean Absolute Error (MAE):', round(metrics.mean_absolute_error(ytest, y_predicted),3))
  print('R2_score:', round(metrics.r2_score(ytest, y_predicted),6))
  print('Root Mean Squared Log Error (RMSLE):', round(np.log(np.sqrt(metrics.mean_squared_error(ytest, y_predicted))),3))
  print('____________________________________________')

def MAPE (ytest, y_predicted):
        ytest, y_predicted = np.array(ytest), np.array(y_predicted)
        return np.mean(np.abs((ytest - y_predicted) / ytest)) * 100

result = MAPE(ytest, y_predicted)
print('Mean Absolute Percentage Error (MAPE):', round(result, 2), '%')

r_squared = round(metrics.r2_score(ytest, y_predicted),6)
adjusted_r_squared = round(1 - (1-r_squared)*(len(y)-1)/(len(y)-x.shape[1]-1),6)
print('Adj R Square: ', adjusted_r_squared)

new_row = {'Model Name' : models,
           'Mean_Absolute_Error_MAE' : metrics.mean_absolute_error(ytest, y_predicted),
           'Adj_R_Square' : adjusted_r_squared,
           'Root_Mean_Squared_Error_RMSE' : np.sqrt(metrics.mean_squared_error(ytest, y_predicted)),
           'Mean_Absolute_Percentage_Error_MAPE' : result,
           'Mean_Squared_Error_MSE' : metrics.mean_squared_error(ytest, y_predicted),
           'Root_Mean_Squared_Log_Error_RMSLE': np.log(np.sqrt(metrics.mean_squared_error(ytest, y_predicted))),
           'R2_score' : metrics.r2_score(ytest, y_predicted)}
Results = Results.append(new_row, ignore_index=True)

Results



df_bk=df.copy()

out=pd.DataFrame({'Price_actual':ytest,'Price_pred':y_predicted})

result=df_bk.merge(out,left_index=True,right_index=True)

result.sample(20)

for model in models:

  y_predicted = model.predict(xtest)

  plt.figure(figsize=(20,8))
  sns.set_style('whitegrid')
  sns.lineplot(data=result,x='days_left',y='Price_actual',color='red')
  sns.lineplot(data=result,x='days_left',y='Price_pred',color='blue')
  plt.title('Days Left For Departure Versus Actual Ticket Price and Predicted Ticket Price',fontsize=20)
  plt.legend(labels=['Price actual','Price predicted'],fontsize=19)
  plt.xlabel('Days Left for Departure',fontsize=15)
  plt.ylabel('Actual and Predicted Price',fontsize=15)
  plt.show()

plt.figure(figsize=(10,5))
sns.set_style('whitegrid')
sns.regplot(x='Price_actual',y='Price_pred',data=result,color='darkred')
plt.title('Actual Price  Vs  Predicted Price ',fontsize=20)
plt.xlabel('Actual Price',fontsize=15)
plt.ylabel('Predicted Price',fontsize=15)
plt.show()

for model in models:

  y_predicted = model.predict(xtest)

  plt.figure(figsize=(10,5))
  sns.set_style('whitegrid')
  sns.regplot(x='Price_actual',y='Price_pred',data=result,color='darkred')
  plt.title('Actual Price  Vs  Predicted Price ',fontsize=20)
  plt.xlabel('Actual Price',fontsize=15)
  plt.ylabel('Predicted Price',fontsize=15)
  plt.show()